{"version":3,"file":"remix-validated-form__with-yup.umd.js","sources":["../src/index.ts"],"sourcesContent":["import { createValidator, FieldErrors, Validator } from \"remix-validated-form\";\nimport type { AnyObjectSchema, InferType, ValidationError } from \"yup\";\n\nconst validationErrorToFieldErrors = (error: ValidationError): FieldErrors => {\n  const fieldErrors: FieldErrors = {};\n  error.inner.forEach((innerError) => {\n    if (!innerError.path) return;\n    fieldErrors[innerError.path] = innerError.message;\n  });\n  return fieldErrors;\n};\n\n/**\n * Create a `Validator` using a `yup` schema.\n */\nexport const withYup = <Schema extends AnyObjectSchema>(\n  validationSchema: Schema\n): Validator<InferType<Schema>> => {\n  return createValidator({\n    validate: async (data) => {\n      try {\n        const validated = await validationSchema.validate(data, {\n          abortEarly: false,\n        });\n        return { data: validated, error: undefined };\n      } catch (err) {\n        return {\n          error: validationErrorToFieldErrors(err as ValidationError),\n          data: undefined,\n        };\n      }\n    },\n    validateField: async (data, field) => {\n      try {\n        await validationSchema.validateAt(field, data);\n        return {};\n      } catch (err) {\n        return { error: (err as ValidationError).message };\n      }\n    },\n  });\n};\n"],"names":["validationErrorToFieldErrors","error","fieldErrors","innerError","withYup","validationSchema","createValidator","data","err","field"],"mappings":"yVAGA,MAAMA,EAAgCC,GAAwC,CAC5E,MAAMC,EAA2B,CAAA,EAC3B,OAAAD,EAAA,MAAM,QAASE,GAAe,CAC9B,CAACA,EAAW,OACJD,EAAAC,EAAW,MAAQA,EAAW,QAAA,CAC3C,EACMD,CACT,EAKaE,EACXC,GAEOC,kBAAgB,CACrB,SAAU,MAAOC,GAAS,CACpB,GAAA,CAIF,MAAO,CAAE,KAHS,MAAMF,EAAiB,SAASE,EAAM,CACtD,WAAY,EAAA,CACb,EACyB,MAAO,MAAU,QACpCC,GACA,MAAA,CACL,MAAOR,EAA6BQ,CAAsB,EAC1D,KAAM,MAAA,CAEV,CACF,EACA,cAAe,MAAOD,EAAME,IAAU,CAChC,GAAA,CACI,aAAAJ,EAAiB,WAAWI,EAAOF,CAAI,EACtC,SACAC,GACA,MAAA,CAAE,MAAQA,EAAwB,QAC3C,CACF,CAAA,CACD"}